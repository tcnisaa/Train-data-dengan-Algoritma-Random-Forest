# -*- coding: utf-8 -*-
"""Jantung.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-84g5dfDQEx-EsCHG2g7z1Urgqg4i1Dp

import
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
my_data= pd.read_csv("heart_statlog_cleveland_hungary_final.csv")
my_data.dropna(inplace=True)
my_data

my_data.info

plt.figure(figsize=(20,10))
sns.heatmap(my_data.corr(),annot=True,cmap="coolwarm")

sns.pairplot(my_data)
plt.show()

my_data.hist(figsize=(20,10),bins = 50)

X=my_data.drop(["target"],axis=1)
X

y=my_data["target"]
y=pd.DataFrame(y)
y

#Standard Scaler for Data
scaler = StandardScaler(copy=True, with_mean=True, with_std=True)
X = scaler.fit_transform(X)
X

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=42, shuffle =True)

#Applying RandomForestClassifier Model
from sklearn.ensemble import RandomForestClassifier
RandomForestClassifierModel = RandomForestClassifier(criterion = 'gini',n_estimators=300,random_state=33) #criterion can be also : entropy
RandomForestClassifierModel.fit(X_train, y_train)


#Calculating Details
print('RandomForestClassifierModel Train Score is : ' , RandomForestClassifierModel.score(X_train, y_train))
print('RandomForestClassifierModel Test Score is : ' , RandomForestClassifierModel.score(X_test, y_test))
print('RandomForestClassifierModel features importances are : ' , RandomForestClassifierModel.feature_importances_)
print('----------------------------------------------------')

#Calculating Prediction
y_pred = RandomForestClassifierModel.predict(X_test)
y_pred_prob = RandomForestClassifierModel.predict_proba(X_test)
print('Predicted Value for RandomForestClassifierModel is : ' , y_pred)
print('Prediction Probabilities Value for RandomForestClassifierModel is : ' , y_pred)

#----------------------------------------------------

prediction=RandomForestClassifierModel.predict(X_test)
from sklearn import metrics
print(metrics.classification_report(y_test, prediction))
print(metrics.confusion_matrix(y_test, prediction))

# drawing confusion matrix
# sns.heatmap(CM, center = True)
# plt.show()
print("accuracy:",metrics.accuracy_score(y_test,prediction))

